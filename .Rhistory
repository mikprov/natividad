" cv=",dataforplot$cvs[1],sep="")) +
theme_classic() + ylab("") + xlab("") + #theme(legend.position = "none") +
#scale_colour_manual(values=cs) +
scale_color_brewer(palette = "Reds") +
theme(plot.title = element_text(size = 10)) +
scale_y_log10()
}
names(prec_sp) <- codNames_ordered_by_peak
rm(i,dataforplot)
dataforplot <- specdatalong[specdatalong$variable.type == "recruits" &
specdatalong$alphavalue %in% alphas[2],] # select one alpha value
dataforplot$peak <- eigentable[match(dataforplot$codNames, eigentable$codNames),"mode_age"]
dataforplot$maxage <- eigentable[match(dataforplot$codNames, eigentable$codNames),"max_ages"]
dataforplot$sd_mode <- eigentable[match(dataforplot$codNames, eigentable$codNames),"sd_mode"]
dataforplot$cvs_mode <- eigentable[match(dataforplot$codNames, eigentable$codNames),"cvs_mode"]
dataforplot$cvs_mode <- round(dataforplot$cvs_mode,digits = 2)
dataforplot$codNames_peak <- paste(dataforplot$codNames,"(",dataforplot$peak,")",sep="")
dataforplot$codNames_maxage <- paste(dataforplot$codNames,"(",dataforplot$maxage,")",sep="")
dataforplot$codNames_cv <- paste(dataforplot$codNames,"(",dataforplot$cvs_mode,")",sep="")
dataforplot$codNames <- factor(dataforplot$codNames,
levels=c("Coas","cod3M","cod3NO","cod3Ps","Northsea",
"Faroe","GB","GM","Iceland","Kat","NGulf","W_Scotland",
"Celtic","NE_Arctic","cod2J3KL","W_Baltic"))
dataforplot$cvs_cat <- rep(NA,length=length(dataforplot$freq))
dataforplot[dataforplot$cvs < 0.3,]$cvs_cat <- 1 #"narrow CV (0.19-0.27)"
dataforplot[dataforplot$cvs > 0.5,]$cvs_cat <- 3 #"wide CV (0.51-0.67)"
dataforplot[is.na(dataforplot$cvs_cat),]$cvs_cat <- 2  #"medium CV (0.32-0.46)"
#dataforplot[dataforplot$maxage < 10,]$cvs_cat <- 1 #"short-lived"
#dataforplot[dataforplot$maxage > 12,]$cvs_cat <- 3 #"long-lived"
#dataforplot[is.na(dataforplot$cvs_cat),]$cvs_cat <- 2 #"medium-lived"
dataforplot$cvs_cat <- factor(dataforplot$cvs_cat)
dataforplot <- subset(dataforplot,selec=c(freq,value,codNames_cv,cvs_cat))
head(dataforplot)
colourCount = length(unique(dataforplot$codNames_cv))
getPalette = colorRampPalette(brewer.pal(9, "Paired"))
rm(pDc,pDw,pDi,pTc,pTw,pTi,sp.whole,fig2plotlist)
# add column for k values (k=1/alpha)
specdatalong$alphavalue <- as.numeric(specdatalong$alphavalue)
specdatalong$kval <- round(1/specdatalong$alphavalue,digits=3)
head(specdatalong)
# choose only a few k values to plot/show other analyses
plotdat <- as.data.frame(specdatalong[specdatalong$alphavalue %in% selectedalphas &                                        specdatalong$variable.type == "recruits",])
# plot 1: pops in order of peak age
plotdat$codNames <- factor(plotdat$codNames, levels=codNames_ordered_by_peak)
str(plotdat)
plotdat$kval <- factor(plotdat$kval,levels=rev(levels(factor(plotdat$kval))))
ggplot(plotdat[plotdat$codNames == codNames[1:8],], aes(x=freq,y=value)) +
geom_line() + facet_grid(kval~codNames) +  scale_y_log10() +
ggtitle("Plot 1: populations ordered by peak spawning age") #ylim(0,1000)
# *************************************** #
# (11) Area under curve
# *************************************** #
head(specdatalong)
freq <- 0.00125
#threshold for high/low frequencies is 1/(2T)
eigentable$AUCthreshold <- 1/(eigentable$mode_age*2)
AUCthreshold_ordered_by_peak <- eigentable %>% arrange(mode_age) %>% pull(AUCthreshold)
#OR threshold could be the same for all pops:
AUCthreshold_lowest <- rep(min(eigentable$AUCthreshold),length=length(eigentable$AUCthreshold))
AUC_amount_highL <- as.list(rep(NA,length=length(alphas)))
AUC_amount_lowL <- as.list(rep(NA,length=length(alphas)))
AUC_percent_highL <- as.list(rep(NA,length=length(alphas)))
AUC_percent_lowL <- as.list(rep(NA,length=length(alphas)))
AUC_total_L <- as.list(rep(NA,length=length(alphas)))
names(AUC_amount_highL) <- alphas
names(AUC_amount_lowL) <- alphas
names(AUC_percent_highL) <- alphas
names(AUC_percent_lowL) <- alphas
names(AUC_total_L) <- alphas
for (j in 1:length(alphas)){ #for each alpha (ie kval)...
AUC_amount_high <- rep(NA,length=length(codNames_ordered_by_peak))
AUC_percent_high <- rep(NA,length=length(codNames_ordered_by_peak))
AUC_amount_low <- rep(NA,length=length(codNames_ordered_by_peak))
AUC_percent_low <- rep(NA,length=length(codNames_ordered_by_peak))
AUC_total <- rep(NA,length=length(codNames_ordered_by_peak))
for (i in 1:length(codNames_ordered_by_peak)){ #step through the pops
# Check inequality sign for percent high or low variability
# multiple ht of each bar under curve by the width (one unit of x, freq)
AUC_amount_high[i] <- sum(freq*specdatalong[specdatalong$variable.type == "recruits"
& specdatalong$codNames==codNames_ordered_by_peak[i]
& specdatalong$alphavalue==alphas[j]
& specdatalong$freq > AUCthreshold_ordered_by_peak[i],]$value)
# > is for %high, =< is for %low
AUC_amount_low[i] <- sum(freq*specdatalong[specdatalong$variable.type == "recruits"
& specdatalong$codNames==codNames_ordered_by_peak[i]
& specdatalong$alphavalue==alphas[j]
& specdatalong$freq <= AUCthreshold_ordered_by_peak[i],]$value)
AUC_total[i] <- sum(freq*specdatalong[specdatalong$variable.type == "recruits"
& specdatalong$codNames==codNames_ordered_by_peak[i]
& specdatalong$alphavalue==alphas[j],]$value)
AUC_percent_high[i] <- AUC_amount_high[i]/AUC_total[i]
AUC_percent_low[i] <- AUC_amount_low[i]/AUC_total[i]
}
#store percents for each k value
AUC_amount_highL[[j]] <- AUC_amount_high
AUC_amount_lowL[[j]] <- AUC_amount_low
AUC_percent_highL[[j]] <- AUC_percent_high
AUC_percent_lowL[[j]] <- AUC_percent_low
AUC_total_L[[j]] <- AUC_total
print(j)
}
rm(i,j)
AUC_amount_highdf <- data.frame(do.call(cbind,AUC_amount_highL))
AUC_amount_lowdf <- data.frame(do.call(cbind,AUC_amount_lowL))
AUC_percent_highdf <- data.frame(do.call(cbind,AUC_percent_highL))
AUC_percent_lowdf <- data.frame(do.call(cbind,AUC_percent_lowL))
AUC_total_df <- data.frame(do.call(cbind,AUC_total_L))
AUC_amount_highdf$codNames <- codNames_ordered_by_peak
AUC_amount_lowdf$codNames <- codNames_ordered_by_peak
AUC_percent_highdf$codNames <- codNames_ordered_by_peak
AUC_percent_lowdf$codNames <- codNames_ordered_by_peak
AUC_total_df$codNames <- codNames_ordered_by_peak
# convert dfs to long format
AUC_amount_highdflong <- AUC_amount_highdf %>%
gather(alpha,value,1:length(alphas)) %>%
separate(alpha,c("addedX","alphaval"),sep="X") %>%
select(-addedX) %>%
mutate(AUCdes=rep("amt_high"))
AUC_amount_lowdflong <- AUC_amount_lowdf %>%
gather(alpha,value,1:length(alphas)) %>%
separate(alpha,c("addedX","alphaval"),sep="X") %>%
select(-addedX) %>%
mutate(AUCdes=rep("amt_low"))
AUC_percent_highdflong <- AUC_percent_highdf %>%
gather(alpha,value,1:length(alphas)) %>%
separate(alpha,c("addedX","alphaval"),sep="X") %>%
select(-addedX) %>%
mutate(AUCdes=rep("per_high"))
AUC_percent_lowdflong <- AUC_percent_lowdf %>%
gather(alpha,value,1:length(alphas)) %>%
separate(alpha,c("addedX","alphaval"),sep="X") %>%
select(-addedX) %>%
mutate(AUCdes=rep("per_low"))
AUC_total_dflong <- AUC_total_df %>%
gather(alpha,value,1:length(alphas)) %>%
separate(alpha,c("addedX","alphaval"),sep="X") %>%
select(-addedX) %>%
mutate(AUCdes=rep("total"))
AUCdat <- rbind(AUC_amount_highdflong,
AUC_amount_lowdflong,
AUC_percent_highdflong,
AUC_percent_lowdflong,
AUC_total_dflong  )
# add columns
#eigentable$peakovermax <- round(eigentable$mode_age / eigentable$max_ages,digits=2)
#AUCdat$peakovermax <- eigentable[match(AUCdat$codNames,eigentable$codNames),"peakovermax"]
AUCdat$peak <- eigentable[match(AUCdat$codNames,eigentable$codNames),"mode_age"]
AUCdat$maxage <- eigentable[match(AUCdat$codNames,eigentable$codNames),"max_ages"]
AUCdat$codNames_plot <- eigentable[match(AUCdat$codNames,eigentable$codNames),"codNames_plot"]
AUCdat$cvs <- eigentable[match(AUCdat$codNames,eigentable$codNames),"cvs_mode"]
AUCdat$cvs <- round(AUCdat$cvs,digits=2)
AUCdat$alphaval <- as.numeric(AUCdat$alphaval)
AUCdat$kval <- round(1/(AUCdat$alphaval*conLEP^2),digits = 2)
AUCdat$codNames_plot_no <- paste(AUCdat$codNames_plot,"(",AUCdat$cvs,")",sep="") #new col w/codName+cv
AUCdat$codNames_plot_no_peak <- paste(AUCdat$codNames_plot,"(",AUCdat$peak,")",sep="") #new col w/peak
AUCdat$codNames_plot_no_maxage <- paste(AUCdat$codNames_plot,"(",AUCdat$maxage,")",sep="")
# set factor levels
AUCdat$kval <- factor(AUCdat$kval,levels=unique(AUCdat$kval))
# set codNames in order of CV
codNames_plot_cvs_order <- unique(AUCdat$codNames_plot_no)
codNames_plot_cvs_order <- factor(codNames_plot_cvs_order,
levels=unique(AUCdat[order(AUCdat$cvs),]$codNames_plot_no))
AUCdat$codNames_plot_no <- factor(AUCdat$codNames_plot_no,levels=levels(codNames_plot_cvs_order))
# set codNames in order of peak age
codNames_plot_peak_order <- unique(AUCdat$codNames_plot_no_peak)
codNames_plot_peak_order <- factor(codNames_plot_peak_order,
levels=unique(AUCdat[order(AUCdat$peak),]$codNames_plot_no_peak))
AUCdat$codNames_plot_no_peak <- factor(AUCdat$codNames_plot_no_peak,
levels=levels(codNames_plot_peak_order))
# set codNames in order of max age
codNames_plot_max_order <- unique(AUCdat$codNames_plot_no_maxage)
codNames_plot_max_order <- factor(codNames_plot_max_order,
levels=unique(AUCdat[order(AUCdat$maxage),]$codNames_plot_no_maxage))
AUCdat$codNames_plot_no_maxage <- factor(AUCdat$codNames_plot_no_maxage,
levels=levels(codNames_plot_max_order))
# *************************************** #
head(ts.data)
ts.data$alphavalue <- as.numeric(as.character(ts.data$alphavalue))
#plotalpha <- unique(ts.data$alphavalue)[c(1,10,20,30,40,50,60,70,80,90)]
plotalpha <- c(8.26,7.51,6.36,5.51,4.59,3.31,2.07,1.38,0.97)
plotalpha <- c(5.51,3.31,2.07,1.38,0.97)
alphas <- plotalpha
#plotalpha <- round(1/(kvals*1.1^2),digits=2)
round(1/(alphas*conLEP^2),digits=2)
# ---
# Calculate Total Variance in each time series:
# ---
varL = as.list(rep(NA,length=length(plotalpha)))
for(i in 1:length(codNames)){ # for each pop i
#subset ts data to pop i only
dat <- ts.data[ts.data$codNames == codNames[i] &
ts.data$variable == "recruits" &
ts.data$alphavalue %in% plotalpha,]
#store variance in ts data at different alpha levels
variance <- rep(NA,length=length(plotalpha))
#store mean of ts data at different alpha levels
means <- rep(NA,length=length(plotalpha))
for(b in 1:length(plotalpha)){ #step through alpha values
# calculate equilibrium value (mean) for each time series (rm first 200 ts)
means[b] <- mean(dat[dat$alphavalue == plotalpha[b],]$value[rm_first_timesteps:(timesteps-2)])
# substract mean from time series (vals_meanrm)
vals = dat[dat$alphavalue == plotalpha[b],]$value[rm_first_timesteps:(timesteps-2)] #- means[b]
# sq root the variance & then divide by mean
variance[b] <- sqrt(var(vals))/means[b]
}
varL[[i]] <- as.data.frame(cbind(variance,plotalpha,rep(as.character(codNames[i]),length=length(plotalpha))))
names(varL[[i]]) <- c("variance","alphavalue","codNames")
}
vardat <- do.call(rbind,varL)
rm(i,b,dat,variance,means,vals) #clean up
head(vardat)
vardat$peak <- eigentable[match(vardat$codNames,eigentable$codNames),"mode_age"]
vardat$kval <- round((1/(as.numeric(as.character(vardat$alphavalue))*conLEP^2)),digits = 2)
vardat$codNames_plot <- eigentable[match(vardat$codNames,eigentable$codNames),"codNames_plot"]
vardat$cvs <- eigentable[match(vardat$codNames,eigentable$codNames),"cvs_mode"]
vardat$maxage <- eigentable[match(vardat$codNames,eigentable$codNames),"max_ages"]
vardat$codNames_plot_no_maxage <- paste(vardat$codNames_plot,"(",vardat$maxage,")",sep="")
# set k slopes to factor, order by increasing slope
vardat$kval <- factor(vardat$kval,levels=unique(vardat$kval))
# make sure variance values are numeric
vardat$variance <- as.numeric(as.character(vardat$variance))
# set codNames factor levels to increase with peak age OR CV
#vardat$codNames_plot <- factor(vardat$codNames_plot,levels=codNames_ordered_by_peak_plot)
codNames_ordered_by_cvs_plot <- eigentable %>% arrange(cvs_mode,codNames) %>% pull(codNames_plot)
codNames_ordered_by_cvs <- eigentable %>% arrange(cvs_mode,codNames) %>% pull(codNames)
# set codNames in order of peak spawning age
vardat$codNames <- factor(vardat$codNames,levels=codNames_ordered_by_cvs)
vardat$codNames_plot <- factor(vardat$codNames_plot,levels=codNames_ordered_by_cvs_plot)
# create codNames col ordered by CV
vardat$cvs <- round(vardat$cvs,digits=2) #round off cv values
vardat$codNames_plot_no <- paste(vardat$codNames_plot,"(",vardat$cvs,")",sep="") #new col w/codName+cv
codNames_plot_no_order <- unique(vardat$codNames_plot_no) #creating factor levels for new names
codNames_plot_no_order <- factor(codNames_plot_no_order,levels=unique(vardat[order(vardat$cvs),]$codNames_plot_no),ordered=TRUE)
vardat$codNames_plot_no <- factor(vardat$codNames_plot_no,levels=levels(codNames_plot_no_order))
# create codNames col ordered by peak
vardat$codNames_plot_no_peak <- paste(vardat$codNames_plot,"(",vardat$peak,")",sep="") #new col w/codName+peak
codNames_plot_no_peak_order <- unique(vardat$codNames_plot_no_peak)
codNames_plot_no_peak_order <- factor(codNames_plot_no_peak_order,levels=unique(vardat[order(vardat$peak),]$codNames_plot_no_peak))
vardat$codNames_plot_no_peak <- factor(vardat$codNames_plot_no_peak,levels=levels(codNames_plot_no_peak_order))
# set codNames in order of max age
codNames_plot_max_order <- unique(vardat$codNames_plot_no_maxage)
codNames_plot_max_order <- factor(codNames_plot_max_order,
levels=unique(vardat[order(vardat$maxage),]$codNames_plot_no_maxage))
vardat$codNames_plot_no_maxage <- factor(vardat$codNames_plot_no_maxage,
levels=levels(codNames_plot_max_order))
fig4bFractionHIGH <- ggplot(data=AUCdat[AUCdat$alphaval %in% alphas & AUCdat$AUCdes=="per_high",],
aes(x=kval,y=codNames_plot_no)) +
geom_raster(aes(fill=value)) +
xlab("Slope on egg-recruit curve at equilibrium (k)") + ylab("") +
scale_fill_gradient(low="purple", high="orange") +
scale_colour_gradient(limits = c(0, 1)) +
theme_classic() +
guides(fill=guide_legend(title=paste("Fraction of variance\nat high frequencies"))) +
theme(axis.text.x = element_text(angle = 70, hjust = 1),
legend.position="top",
legend.justification = c(0, 1),
plot.title = element_text(hjust = -0.5, vjust=-0.1),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)) + theme(plot.margin=unit(c(0.1,1.5,0.1,0.1),"cm"))
fig4bFractionHIGH
fig4aTotalVar <- ggplot(data=vardat[vardat$alphaval%in% alphas,],
aes(x=kval,y=codNames_plot_no_maxage)) +
geom_raster(aes(fill=variance)) +
xlab("Slope on egg-recruit curve at equilibrium (k)") + ylab("") +
scale_fill_gradient(low="purple", high="orange") +
scale_colour_gradient(limits = c(0, 1)) +
theme_classic() +
guides(fill=guide_legend(title=paste("Total Variance"))) +
theme(axis.text.x = element_text(angle = 70, hjust = 1),
legend.position="top",
legend.justification = c(0, 1),
legend.box="horizontal",
plot.title = element_text(hjust = -0.8, vjust=-0.1),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8)) + theme(plot.margin=unit(c(0.1,1.5,0.1,0.1),"cm"))
newfigtest <- ggplot(vardat[vardat$kval %in% selectedkvals,],
aes(x=maxage,y=variance)) +
geom_point() +
geom_smooth(method="lm",se=FALSE,color="black") +
facet_grid(. ~ kval) +
#scale_y_continuous(limits=c(0.6,1)) +
geom_text_repel(data=vardat[vardat$kval %in% selectedkvals,],
aes(label = codNames_plot),
segment.color = "grey",
size = 2,
na.rm = TRUE) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_text(angle = 90),
axis.text.x = element_text(angle = 40, hjust = 1)) +
ylab("Total variance in recruitment time series") +
xlab("Maximum age")
newfigtest
# Testing new figure: 4 panel plot
# panels = k values
# xaxis = max age
# yaxis = CV in recruitment time series
head(vardat)
newfigtest <- ggplot(vardat[vardat$kval %in% selectedkvals,],
aes(x=cvs,y=variance)) +
geom_point() +
geom_smooth(method="lm",se=FALSE,color="black") +
facet_grid(. ~ kval) +
#scale_y_continuous(limits=c(0.6,1)) +
geom_text_repel(data=vardat[vardat$kval %in% selectedkvals,],
aes(label = codNames_plot),
segment.color = "grey",
size = 2,
na.rm = TRUE) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_text(angle = 90),
axis.text.x = element_text(angle = 40, hjust = 1)) +
ylab("Total variance in recruitment time series") +
xlab("Spawning distrition CV")
newfigtest
newfigtest <- ggplot(vardat[vardat$kval %in% selectedkvals,],
aes(x=sd,y=variance)) +
geom_point() +
geom_smooth(method="lm",se=FALSE,color="black") +
facet_grid(. ~ kval) +
#scale_y_continuous(limits=c(0.6,1)) +
geom_text_repel(data=vardat[vardat$kval %in% selectedkvals,],
aes(label = codNames_plot),
segment.color = "grey",
size = 2,
na.rm = TRUE) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_text(angle = 90),
axis.text.x = element_text(angle = 40, hjust = 1)) +
ylab("Total variance in recruitment time series") +
xlab("Spawning distrition Stdev")
newfigtest
# Testing new figure: 4 panel plot
# panels = k values
# xaxis = max age
# yaxis = CV in recruitment time series
head(vardat)
head(eigentable)
vardat$sd <- eigentable[match(vardat$codNames,eigendata$codNames),"sd_mode"]
newfigtest <- ggplot(vardat[vardat$kval %in% selectedkvals,],
aes(x=sd,y=variance)) +
geom_point() +
geom_smooth(method="lm",se=FALSE,color="black") +
facet_grid(. ~ kval) +
#scale_y_continuous(limits=c(0.6,1)) +
geom_text_repel(data=vardat[vardat$kval %in% selectedkvals,],
aes(label = codNames_plot),
segment.color = "grey",
size = 2,
na.rm = TRUE) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_text(angle = 90),
axis.text.x = element_text(angle = 40, hjust = 1)) +
ylab("Total variance in recruitment time series") +
xlab("Spawning distrition Stdev")
newfigtest
library(tidyr)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(directlabels)
library(grid)
library(lattice)
library(tidyverse)
#install.packages("stargazer")
library(stargazer)
library(RColorBrewer)
library(ggrepel)
# ---
# load the simulation model
source("C:/Users/Mikaela/Documents/GitHub/popdy/cod_code/simulation_model_cod_v3.r")
# load functions --> ***** CHECK for MG or MP *****
source("C:/Users/Mikaela/Documents/GitHub/popdy/cod_code/2_cod_functions.r")
# load peak spawning age info
eigentable = read.csv("C:/Users/Mikaela/Documents/GitHub/popdy/cod_code/mikaelaLSB/eigentable_MM.csv",
header=TRUE,stringsAsFactors = FALSE)
eigentable = as.data.frame(eigentable)
# *******************
# depending on which M parm, run the right code
# *******************
# MG
eigentable$codNames <- factor(eigentable$codNames,levels=eigentable[order(eigentable$mode_ageMG,eigentable$temp),]$codNames)
eigentable$codNames_plot <- factor(eigentable$codNames_plot,levels=eigentable[order(eigentable$mode_ageMG,eigentable$temp),]$codNames_plot)
eigentable <- eigentable %>% select(-mode_ageMP,-sd_modeMP,-cvs_modeMP) %>% rename(mode_age=mode_ageMG,sd_mode=sd_modeMG,cvs_mode=cvs_modeMG)
# make all LEPs equal
conLEP = 1.1
# adjust fecundities by this much
adjFec = round(1/conLEP,digits=1)
#selectedkvals <- round(1/selectedalphas,digits=2)
selectedkvals <- c(0.15,0.4,0.6,0.85)
selectedalphas <- round(1/(selectedkvals*conLEP^2),digits=2)
alphas <- c(8.26,7.51,6.36,5.51,4.59,3.31,2.07,1.38,0.97)
kvals = round(1/(alphas*conLEP^2),digits=2)
# setting up for later
codNames <- eigentable$codNames
codNames_ordered_by_peak <- levels(eigentable$codNames)
codNames_ordered_by_peak_plot <- levels(eigentable$codNames_plot)
# *************************************** #
# (Fig 3:eigenvalue) Generate Leslie matricies for diff F values (create Leslie arrays)
# *************************************** #
Aarray = as.list(rep(NA,length(codNames))) #Leslie matrix storage for each k value for pop i
names(Aarray) <- codNames
LeslieoutNEARL <- as.list(rep(NA,length=length(codNames)))
names(LeslieoutNEARL) <- codNames
# store eigenvalues here
eigenvals1 = matrix(NA,nrow=length(kvals),ncol=length(codNames))
eigenvals2 = matrix(NA,nrow=length(kvals),ncol=length(codNames))
eigenvals12 = matrix(NA,nrow=length(kvals),ncol=length(codNames))
# store max fecundities
maxfecunds = matrix(NA,nrow=length(kvals),ncol=length(codNames))
# store LEP values
LEPvals = matrix(NA,nrow=length(kvals),ncol=length(codNames))
# store top row sums
toprowsums = matrix(NA,nrow=length(kvals),ncol=length(codNames))
# store new LEP with adjusted fecundities (divide by half of original LEP)
newLEPs = matrix(NA,nrow=length(kvals),ncol=length(codNames))
i=1
# load parms for cod pop i: L_inf, K (for vonB), TEMP, maxage,B0,B1 (matur)
source(file = paste('C:/Users/Mikaela/Documents/GitHub/popdy/cod_pops/',codNames[i], '.r', sep=''))
Lesliearray <- array(NA,c(maxage,maxage,length(kvals))) #store Leslie matricies for simulations
#Leslie_eigens <- array(NA,c(maxage,maxage,length(kvals))) #store Leslie matricies for eigen analysis
e1 = rep(NA,length=length(kvals)) #store lambda1
e2 = rep(NA,length=length(kvals)) #store lambda2
e12 = rep(NA,length=length(kvals)) #store inverse damping ratio
maxfec = rep(NA,length=length(kvals)) #store max fec values
LEPs = rep(NA,length=length(kvals))
toprowsum = rep(NA,length=length(kvals))
newLEP = rep(NA,length=length(kvals)) #recalculte LEP with adjusted fs
k=1
# create Leslie matrix:
Leslieout = assemble_Leslie(maxage=maxage, K=K, L_inf=L_inf,
F.halfmax=0, B0=B0, B1=B1, tknot=0)
Leslieout$NEAR
exp(-(0.427*2))
exp(-(0.427*3))
exp(-(0.427*4))
Jacobian.sim <- Leslieout$A
Jacobian.eig <- Leslieout$A
# max fecundity values
maxfec[k] <- max(Leslieout$A[1,])
# LEP for this popualtion
LEP = sum(Leslieout$NEAR[["egg_production"]])
LEPs[k] = LEP
# re-calculate LEP with new adjusted fecundities before k is incorporated
newfs <- Leslieout$A[1,]/(LEP*adjFec)
term <- rep(NA,length=maxage)
for(a in 1:maxage){term[a] <- newfs[a]*Leslieout$NEAR$Survship[a]}
term
sum(term)
alphas
adjFec
# Plot Isla Natividad
setwd("C:/Users/Mikaela/Documents/GitHub/natividad")
workshop.packages <- c("sp", "rgdal", "rgeos", "raster", "dismo", "leaflet", "RColorBrewer", "classInt")
lapply(workshop.packages, library, character.only = TRUE)
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("~/shapefiles/MEX.shp")
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("shapefiles/MEX.shp")
s
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("shapefiles/countries.shp")
s
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("shapefiles/colectores.shp")
s
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("shapefiles/colectores_11_25_08.shp")
s
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
pts <- shapefile("shapefiles/colectores_11_25_08.shp")
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
#load in the provinces data (downloaded from naturalearthdata.com)
s <- shapefile("shapefiles/MEX.shp")
s
pts <- shapefile("shapefiles/colectores_11_25_08.shp")
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(s)
plot(pts, add=TRUE, col="red", lwd=3)
pts
world <- shapefile("shapefiles/countries.shp")
world
# many files associated with shapefile. As a group, make up the shapefile
# look for coordinate ref system, it should be fine
plot(world)
plot(pts, add=TRUE, col="red", lwd=3)
plot(pts, col="red",lwd=3)
nat <- shapefile("shapefiles/islaNatividad.shp")
# Plot Isla Natividad
setwd("C:/Users/Mikaela/Documents/GitHub/natividad")
nat <- shapefile("shapefiles/islaNatividad.shp")
